
volumes:
  n8n_storage:
  ollama_storage:
  open-webui:
  # caddy-data:
  # caddy-config:
  postgres_data:
  pgadmin_data:

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=postgres
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - DB_POSTGRESDB_DATABASE=postgres
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ALLOW_EXTERNAL_MODULES=*
    - N8N_ENFORCE_SETTINGS_FILE_PERMISSIONS=true
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - WEBHOOK_URL=${N8N_HOSTNAME:+https://}${N8N_HOSTNAME:-http://localhost:5678}
#    - OLLAMA_HOST=host.docker.internal:11434

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  restart: unless-stopped
  expose:
    - 11434/tcp
  environment:
    - OLLAMA_CONTEXT_LENGTH=8192
    - OLLAMA_FLASH_ATTENTION=1
    - OLLAMA_KV_CACHE_TYPE=q8_0
    - OLLAMA_MAX_LOADED_MODELS=2
  volumes:
    - ollama_storage:/root/.ollama
    - ./selfSignedCertificate/sampleCert.pem:/usr/local/share/ca-certificates/sampleCert.crt:ro
  entrypoint:  /bin/sh
  command: 
    - -c
    - |
      if command -v update-ca-certificates >/dev/null 2>&1; then
        update-ca-certificates
      fi
      exec "$(command -v ollama)" serve

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
    - ./selfSignedCertificate/sampleCert.pem:/usr/local/share/ca-certificates/sampleCert.crt:ro
  entrypoint: /bin/sh
  command:
    - "-c"
    - |
      set -e
      if command -v update-ca-certificates >/dev/null 2>&1; then
        update-ca-certificates
      fi
      sleep 3
      OLLAMA_HOST=ollama:11434 ollama pull qwen2.5:7b-instruct-q4_K_M
      OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text

services:
  pgadmin-restore:
    image: alpine:3.20
    entrypoint: ["sh","-lc"]
    command:
      - |
        set -e
        if [ -d /backup ] && [ "$(ls -A /backup 2>/dev/null)" ]; then
          echo "Restoring pgAdmin data from backup..."
          cp -a /backup/. /data/
          chown -R 5050:5050 /data || true
        else
          echo "No pgAdmin backup present; skipping restore."
        fi
    volumes:
      - pgadmin_data:/data
      - ./pgadmin-backup:/backup:ro
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    restart: unless-stopped
    container_name: open-webui
    expose:
      - 8080/tcp
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data
  n8n-import:
     <<: *service-n8n
     container_name: n8n-import
     entrypoint: /bin/sh
     command:
       - "-c"
       - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
     volumes:
       - ./n8n/backup:/backup

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    expose:
      - 5678/tcp
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    depends_on:
      n8n-import:
        condition: service_completed_successfully

  

  postgres:
    image: pgvector/pgvector:0.8.1-pg18
    command: -c 'max_connections=500' -c 'idle_session_timeout=5000'
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 3s
      retries: 10
    expose:
      - 5432/tcp
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: postgres
      # App-specific DB credentials sourced from .env (with sensible defaults)
      N8N_DB_USER: ${N8N_DB_USER:-n8n_user}
      N8N_DB_PASSWORD: ${N8N_DB_PASSWORD:-change_me}
      N8N_DB_NAME: ${N8N_DB_NAME:-n8n}
    volumes:
      # Mount SQL with a non-executable extension so only the wrapper runs it
      - ./scripts/pgvector-init.sql:/docker-entrypoint-initdb.d/init.sql.template:ro
      - ./scripts/pg-init.sh:/docker-entrypoint-initdb.d/010-init.sh:ro
      - postgres_data:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4:latest
    restart: unless-stopped
    expose:
      - 80/tcp
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_started
      pgadmin-restore:
        condition: service_completed_successfully

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-gpu-amd:
    profiles: ["gpu-amd"]
    <<: *service-ollama
    image: ollama/ollama:rocm
    devices:
      - "/dev/kfd"
      - "/dev/dri"

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu

  ollama-pull-llama-gpu-amd:
    profiles: [gpu-amd]
    <<: *init-ollama
    image: ollama/ollama:rocm
    depends_on:
     - ollama-gpu-amd
